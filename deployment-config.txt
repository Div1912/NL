# Learning Platform Deployment Guide

## Prerequisites
- Node.js (v16 or later)
- npm or yarn
- Git
- Vercel account (recommended for easiest deployment)

## Option 1: Deploy to Vercel (Recommended)

1. First, prepare your project:
```bash
# Install Vercel CLI
npm install -g vercel

# Push your code to GitHub if you haven't already
git init
git add .
git commit -m "Initial commit"
git remote add origin <your-github-repo-url>
git push -u origin main
```

2. Create a `vercel.json` configuration file in your project root:
```json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  }
}
```

3. Deploy using Vercel CLI:
```bash
# Login to Vercel
vercel login

# Deploy
vercel
```

## Option 2: Deploy to a Traditional Server

1. Create a production build:
```bash
# Install dependencies
npm install

# Create production build
npm run build

# The build will be in the 'dist' or 'build' directory
```

2. Create a server configuration (nginx example):
```nginx
server {
    listen 80;
    server_name your-domain.com;
    root /path/to/your/build;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location /static {
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
}
```

3. Deploy using SSH:
```bash
# Copy build files to server
scp -r build/* user@your-server:/path/to/deployment

# SSH into server and set permissions
ssh user@your-server
chmod -R 755 /path/to/deployment
```

## Environment Variables

Create a `.env.production` file with these variables:
```plaintext
NEXT_PUBLIC_API_URL=https://your-api-url.com
NEXT_PUBLIC_AUTH_DOMAIN=your-auth-domain
NEXT_PUBLIC_STORAGE_BUCKET=your-storage-bucket
```

## Post-Deployment Checklist

1. Verify all routes are working
2. Check authentication flows
3. Validate API connections
4. Test file uploads
5. Monitor error reporting
6. Check analytics integration
7. Verify SSL certificate
8. Test mobile responsiveness

## Monitoring and Maintenance

1. Set up monitoring:
```bash
# Install monitoring tools
npm install --save-dev @sentry/react @sentry/tracing

# Add to your main.js/tsx
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "your-sentry-dsn",
  integrations: [new Sentry.BrowserTracing()],
  tracesSampleRate: 1.0,
});
```

2. Regular maintenance tasks:
- Monitor error logs
- Update dependencies
- Backup data
- Check performance metrics
- Update SSL certificates
- Review security settings

## Rollback Procedure

If issues occur after deployment:

1. Using Vercel:
```bash
# List deployments
vercel ls

# Rollback to previous deployment
vercel rollback
```

2. Manual rollback:
```bash
# Keep backup of current version
mv /path/to/deployment /path/to/deployment.backup

# Restore previous version
cp -r /path/to/previous-version /path/to/deployment
```

## Security Considerations

1. Add security headers in `next.config.js`:
```javascript
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains'
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin'
          }
        ]
      }
    ]
  }
}
```

2. Enable rate limiting
3. Configure CORS properly
4. Set up WAF rules
5. Enable DDoS protection

## Performance Optimization

1. Add image optimization in `next.config.js`:
```javascript
module.exports = {
  images: {
    domains: ['your-image-domain.com'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },
}
```

2. Enable caching:
```javascript
// Add caching headers in API routes
res.setHeader('Cache-Control', 's-maxage=10, stale-while-revalidate');
```

3. Implement code splitting:
```javascript
// Use dynamic imports for large components
const DashboardComponent = dynamic(() => import('../components/Dashboard'), {
  loading: () => <p>Loading...</p>
});
```
